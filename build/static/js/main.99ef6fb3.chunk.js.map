{"version":3,"sources":["NewTaskForm/NewTaskForm.jsx","Timer/Timer.jsx","Task/Task.jsx","TaskList/TaskList.jsx","TaskFilter/TaskFilter.jsx","Footer/Footer.jsx","App/App.jsx","index.jsx"],"names":["NewTaskForm","addTask","useState","value","setValue","minutes","setMinutes","seconds","setSeconds","setValidStates","event","target","name","Number","isNaN","className","onSubmit","preventDefault","tabIndex","placeholder","onChange","type","aria-label","defaultProps","Timer","props","setStoppedTrue","setStoppedFalse","onClick","Task","completeChanged","id","taskDestroyed","completed","taskText","taskCreateTime","setNewTime","timerIsStoped","setTimerIsStoped","useEffect","timeoutId","clearTimeout","setTimeout","sec","min","startTimer","defaultChecked","formatDistanceToNow","includeSeconds","defaultValue","Date","Math","random","TaskList","todoData","currentFilter","arrTaskList","filter","el","slice","map","element","key","tasksFiltered","TaskFilter","state","activeButton","changeFilter","this","textContent","setState","onKeyDown","keyCode","React","Component","Footer","clearCompleted","uncompletedTasks","App","serverInfo","setServerInfo","setCurrentFilter","newServerInfo","push","reduce","acc","elem","filterName","tasksRemain","forEach","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.99ef6fb3.chunk.js","sourcesContent":["import { React, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './NewTaskForm.css';\n\nconst NewTaskForm = ({ addTask }) => {\n\n  const [ value, setValue ] = useState('')\n  const [ minutes, setMinutes ] = useState('')\n  const [ seconds, setSeconds ] = useState('')\n\n\n  const setValidStates = (event) => {\n    if (event.target.name === 'task') {\n      setValue(event.target.value);\n      // console.dir('task', minutes, seconds)\n    }\n\n    if (event.target.name === 'minutes' && !Number.isNaN(+event.target.value)) {\n      setMinutes(+event.target.value);\n    }\n\n    if (event.target.name === 'seconds' && !Number.isNaN(+event.target.value) && +event.target.value <= 60) {\n      setSeconds(+event.target.value);\n    }\n  };\n\n\n    return (\n      <header className=\"header\">\n        <h1>todos</h1>\n        <form\n          className=\"new-todo-form\"\n          onSubmit={(event) => {\n            event.preventDefault();\n            if (!value) {\n              return;\n            }\n            addTask(value, minutes, seconds);\n            \n            setValue('');\n            setMinutes('');\n            setSeconds('');\n          }}\n        >\n          <input\n            className=\"new-todo\"\n            name=\"task\"\n            tabIndex={0}\n            placeholder=\"What needs to be done?\"\n            value={value}\n            onChange={setValidStates}\n          />\n          <input\n            className=\"new-todo-form__timer\"\n            name=\"minutes\"\n            value={minutes}\n            placeholder=\"Min\"\n            onChange={setValidStates}\n          />\n          <input\n            className=\"new-todo-form__timer\"\n            name=\"seconds\"\n            value={seconds}\n            placeholder=\"Sec\"\n            onChange={setValidStates}\n          />\n          <button type=\"submit\" aria-label=\"отправить\" />\n        </form>\n      </header>\n    );\n  }\n\nNewTaskForm.defaultProps = {\n  addTask: () => {},\n};\n\nNewTaskForm.propTypes = {\n  addTask: PropTypes.func,\n};\n\nexport default NewTaskForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Timer = (props) => {\n  const { minutes } = props;\n  const { seconds } = props;\n  const { setStoppedTrue } = props;\n  const { setStoppedFalse } = props;\n\n  // const intervalStartTimer = setInterval(() => {\n  //   startTimer()\n  // }, 1000);\n\n  return (\n    <span className=\"description\">\n      <button className=\"icon icon-play\" aria-label=\"запустить\" type=\"button\" onClick={setStoppedFalse} />\n      <button className=\"icon icon-pause\" aria-label=\"остановить\" type=\"button\" onClick={setStoppedTrue} />\n      <span className=\"timer-time\">{`${minutes}:${seconds}`}</span>\n    </span>\n  );\n};\n\nTimer.defaultProps = {\n  minutes: '00',\n  seconds: '00',\n  setStoppedTrue: () => {},\n  setStoppedFalse: () => {},\n};\n\nTimer.propTypes = {\n  minutes: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  seconds: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  setStoppedTrue: PropTypes.func,\n  setStoppedFalse: PropTypes.func,\n};\n\nexport default Timer;\n","import { React, useState, useEffect } from 'react';\n// import ReactDOM from \"react-dom\";\nimport PropTypes from 'prop-types';\nimport formatDistanceToNow from 'date-fns/formatDistanceToNow';\n\nimport './Task.css';\n\nimport Timer from '../Timer/Timer';\n\nconst Task = ({ minutes, seconds, completeChanged, id, taskDestroyed, completed,\ntaskText, taskCreateTime, className, setNewTime}) => {\n\n  const [ timerIsStoped, setTimerIsStoped ] = useState(true)\n\n  const setStoppedFalse = () => {\n    // console.log('false')\n    setTimerIsStoped(false)\n  }\n\n  const setStoppedTrue = () => {\n    // console.log('false')\n    setTimerIsStoped(true)\n  }\n\n  const startTimer = () => {\n          // console.log('интервалит')\n          \n          let sec\n          let min\n\n          if (minutes) {\n            min = minutes;\n            sec = seconds - 1;\n            if(sec === -1) {\n              sec = 59;\n              min -= min - 1;\n            }\n          }\n          else if (seconds) {\n            sec = seconds - 1\n          }\n\n          setNewTime(id, min, sec)\n        \n        };\n\n\n  const completeToogler = () => {\n    completeChanged(id);\n  };\n\n  const currentTaskDestroyed = () => {\n\n    taskDestroyed(id);\n  };\n\n  useEffect(() => {\n    let timeoutId\n    if (!timerIsStoped) {\n     timeoutId = setTimeout( () => {\n        startTimer()\n      }, 1000)\n    } else clearTimeout(timeoutId)\n\n    return () => clearTimeout(timeoutId)\n  \n  })\n\n  \n    return (\n      <li className={completed ? 'completed' : ''}>\n        <div className=\"view\">\n          <input className=\"toggle\" type=\"checkbox\" onClick={completeToogler} defaultChecked={completed} />\n          <label>\n            <span className=\"title\">{taskText}</span>\n            {minutes || seconds ? (\n              <Timer\n                minutes={minutes}\n                seconds={seconds}\n                setStoppedFalse={setStoppedFalse}\n                setStoppedTrue={setStoppedTrue}\n              />\n            ) : null}\n            <span className=\"created\">created {formatDistanceToNow(taskCreateTime, { includeSeconds: true })} ago</span>\n          </label>\n          <button className=\"icon icon-edit\" type=\"button\" aria-label=\"Редактировать\" />\n          <button\n            className=\"icon icon-destroy\"\n            onClick={currentTaskDestroyed}\n            type=\"button\"\n            aria-label=\"Удалить\"\n          />\n        </div>\n        {className === 'editing' ? <input type=\"text\" className=\"edit\" defaultValue=\"Editing task\" /> : null}\n      </li>\n    );\n}\n\nTask.defaultProps = {\n  completed: false,\n  taskText: '',\n  minutes: '',\n  seconds: '',\n  taskCreateTime: new Date(),\n  id: Math.random(),\n  completeChanged: () => {},\n  taskDestroyed: () => {},\n  className: '',\n};\n\nTask.propTypes = {\n  completed: PropTypes.bool,\n  taskText: PropTypes.string,\n  minutes: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  seconds: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  taskCreateTime: PropTypes.objectOf(PropTypes.object),\n  id: PropTypes.number,\n  completeChanged: PropTypes.func,\n  taskDestroyed: PropTypes.func,\n  className: PropTypes.string,\n  setNewTime: PropTypes.func.isRequired,\n};\n\nexport default Task;\n","import React from 'react';\n// import ReactDOM from \"react-dom\";\nimport PropTypes from 'prop-types';\n\nimport './TaskList.css';\n\nimport Task from '../Task/Task';\n\nconst TaskList = ({ todoData, completeChanged, taskDestroyed, currentFilter, setNewTime }) => {\n  const tasksFiltered = () => {\n    let arrTaskList;\n\n    if (currentFilter === 'Active') {\n      arrTaskList = todoData.filter((el) => el.completed === false);\n    }\n\n    if (currentFilter === 'Completed') {\n      arrTaskList = todoData.filter((el) => el.completed === true);\n    } else if (currentFilter === 'All') {\n      arrTaskList = todoData.slice();\n    }\n\n    arrTaskList = arrTaskList.map((element) => (\n      <Task {...element} key={element.id} completeChanged={completeChanged} taskDestroyed={taskDestroyed}\n      setNewTime={setNewTime} />\n    ));\n\n    // console.log(currentFilter, arrTaskList, todoData);\n    return arrTaskList;\n  };\n\n  return <ul className=\"todo-list\">{tasksFiltered()}</ul>;\n};\n\nTaskList.defaultProps = {\n  todoData: [{}],\n  completeChanged: () => {},\n  taskDestroyed: () => {},\n  currentFilter: 'All',\n};\n\nTaskList.propTypes = {\n  todoData: PropTypes.arrayOf(PropTypes.object),\n  completeChanged: PropTypes.func,\n  taskDestroyed: PropTypes.func,\n  currentFilter: PropTypes.string,\n  setNewTime: PropTypes.func.isRequired\n};\n\nexport default TaskList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './TaskFilter.css';\n\nclass TaskFilter extends React.Component {\n  state = {\n    activeButton: 'All',\n  };\n\n  static defaultProps = {\n    changeFilter: () => {},\n  };\n\n  static propTypes = {\n    changeFilter: PropTypes.func,\n  };\n\n  render() {\n    const { changeFilter } = this.props;\n    const { activeButton } = this.state;\n    return (\n      // eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions\n      <ul\n        className=\"filters\"\n        onClick={(event) => {\n          changeFilter(event.target.textContent);\n          this.setState({\n            activeButton: event.target.textContent,\n          });\n        }}\n        onKeyDown={(event) => {\n          if (event.keyCode === 13) {\n            changeFilter(event.target.textContent);\n            this.setState({\n              activeButton: event.target.textContent,\n            });\n          }\n        }}\n      >\n        <li>\n          <button className={activeButton === 'All' ? 'selected' : null} type=\"button\">\n            All\n          </button>\n        </li>\n        <li>\n          <button className={activeButton === 'Active' ? 'selected' : null} type=\"button\">\n            Active\n          </button>\n        </li>\n        <li>\n          <button className={activeButton === 'Completed' ? 'selected' : null} type=\"button\">\n            Completed\n          </button>\n        </li>\n      </ul>\n    );\n  }\n}\n\nexport default TaskFilter;\n","import React from 'react';\n// import ReactDOM from \"react-dom\";\nimport PropTypes from 'prop-types';\n\nimport TaskFilter from '../TaskFilter/TaskFilter';\n\nimport './Footer.css';\n\nconst Footer = (props) => {\n  const { changeFilter } = props;\n  const { clearCompleted } = props;\n  const { uncompletedTasks } = props;\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">{uncompletedTasks()} items left</span>\n      <TaskFilter changeFilter={changeFilter} />\n      <button className=\"clear-completed\" onClick={clearCompleted} type=\"button\">\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n\nFooter.defaultProps = {\n  changeFilter: () => {},\n  clearCompleted: () => {},\n  uncompletedTasks: () => {},\n};\n\nFooter.propTypes = {\n  changeFilter: PropTypes.func,\n  clearCompleted: PropTypes.func,\n  uncompletedTasks: PropTypes.func,\n};\n\nexport default Footer;\n","import { React, useState } from 'react';\n\nimport './App.css';\n\nimport NewTaskForm from '../NewTaskForm/NewTaskForm';\nimport TaskList from '../TaskList/TaskList';\nimport Footer from '../Footer/Footer';\n\nconst App = () => {\n  // state = {\n  //   serverInfo: [],\n  //   currentFilter: 'All',\n  // };\n\n  const [ serverInfo, setServerInfo ] = useState([])\n  const [ currentFilter, setCurrentFilter ] = useState('All')\n\n  const uncompletedTasks = () => {\n\n    let tasksRemain = 0;\n\n    serverInfo.forEach((el) => {\n      if (el.completed === false) {\n        tasksRemain += 1;\n      }\n    });\n    return tasksRemain;\n  };\n\n  const clearCompleted = () => {\n\n    const newServerInfo = serverInfo.filter((el) => el.completed === false);\n\n    setServerInfo(newServerInfo);\n  };\n\n  const changeFilter = (filterName) => {\n    // console.log(filterName);\n    setCurrentFilter(filterName);\n    // console.log(this.state);\n  };\n\n  const addTask = (taskText, min, sec) => {\n\n    const newServerInfo = [...serverInfo];\n\n    newServerInfo.push({\n      id: Math.random(),\n      completed: false,\n      taskText,\n      taskCreateTime: new Date(),\n      minutes: min,\n      seconds: sec,\n    });\n\n    setServerInfo(newServerInfo);\n  };\n\n  const completeChanged = (id) => {\n    const servInf = [...serverInfo]\n\n    const newServerInfo = servInf.map((el) => {\n      const element = el;\n      if (el.id === id) {\n        element.completed = !element.completed;\n      }\n      return element;\n    });\n    // console.log(\"меняем на completed\");\n    // console.log(newServerInfo);\n\n    setServerInfo(newServerInfo);\n  };\n\n  const taskDestroyed = (id) => {\n    const servInf = [...serverInfo]\n\n    const newServerInfo = servInf.filter((el) => el.id !== id);\n\n    setServerInfo(newServerInfo);\n  };\n\n  const setNewTime = (id, minutes, seconds) => {\n    const newServerInfo = serverInfo.reduce( (acc, elem) => {\n      if (elem.id === id) {\n        // eslint-disable-next-line no-param-reassign\n        elem.minutes = minutes;\n        // eslint-disable-next-line no-param-reassign\n        elem.seconds = seconds;\n        acc.push(elem)\n        return acc\n      }\n      acc.push(elem);\n      return acc;\n    }, []);\n\n    setServerInfo(newServerInfo)\n\n  }\n\n  return (\n      <section className=\"todoapp\">\n        <NewTaskForm addTask={addTask} />\n        <TaskList\n          todoData={serverInfo}\n          completeChanged={completeChanged}\n          taskDestroyed={taskDestroyed}\n          currentFilter={currentFilter}\n          setNewTime={setNewTime}\n        />\n        <Footer\n          changeFilter={changeFilter}\n          clearCompleted={clearCompleted}\n          uncompletedTasks={uncompletedTasks}\n        />\n      </section>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}